<svg xmlns="http://www.w3.org/2000/svg"
     xmlns:xlink="http://www.w3.org/1999/xlink"
     width="980" height="600"
     viewBox="0 0 980 600"
     version="1.1"
     onload="init(evt)">

	<title>Experiments in dividing an image in to bits</title>
	<desc>Damian Cugley, 2010-08-10</desc>
	<defs id="defs">
    	
    	<!--><image id="im" xlink:href="http://farm5.static.flickr.com/4101/4869772653_fdb7fb3857_b.jpg"
    	        width="1024" height="683" />-->
    	        <!--
    	<clipPath id="caa" clipPathUnits="userSpaceOnUse">
    	    <path d="M0,125 h75 l-20,-20 h90 l-20,20 h75 v-38.5 l20,20 v-90 l-20,20 v-38.5 v-125 h-200 z"/>
	    </clipPath>
    	<clipPath id="cab" clipPathUnits="userSpaceOnUse">
    	    <path d="M75,125 l-20,20 h90 l-20,-20 h75 v-125 h-200 v37.5 l20,-20 v90 l-20,-20 v37.5 z"/>
	    </clipPath>-->
	</defs>
	<g id="bg">
	    <rect width="980" height="600" fill="#253" stroke="#000" stroke-width="2" />
    </g>
	<g id="p">
	    <!--
    	<g id="paa" transform="translate(100 100)">
            <image xlink:href="" 
    	         clip-path="url(#caa)" x="0" y="0" width="1024" height="683" />
    	</g>
    	<g id="pab" transform="translate(300 100)">
            <image xlink:href="http://farm5.static.flickr.com/4101/4869772653_fdb7fb3857_b.jpg" 
    	         clip-path="url(#cab)" x="-200" y="0" width="1024" height="683" />
    	</g>
    	-->
    </g>
    <text id="dbg" y="580" font-height="20">Hello</text>
	<script><![CDATA[
		var doc = null;
		var rootElt = null;
		var SVG = 'http://www.w3.org/2000/svg';
		var XLINK = 'http://www.w3.org/1999/xlink';

		var globalElement = null;

		function init(evt) {
			doc = evt.target.ownerDocument;
			rootElt = doc.documentElement;
			
			var pieces = mkPieces('http://farm5.static.flickr.com/4101/4869772653_fdb7fb3857_z.jpg', 640, 427, 4, 4);
			initDrag('p', pieces);
		};
		
		// Find an element by ID.
		function elt(idOrElt) {
		    if (idOrElt.getAttribute) {
		        return idOrElt;
		    }
		    return doc.getElementById(idOrElt);
		}
		
		// Create an element with the given name and attributes. 
		function mk(n, atts) {
	        var e = document.createElementNS(SVG, n);
	        if (atts) {
	            for (var i in atts) {
	                if (i == 'href') {
	                    e.setAttributeNS(XLINK, 'href', atts[i])
	                } else {
	                    e.setAttribute(i, atts[i]);
	                }
                }
            }
            return e;
		}
		
		// Create an element and attach it to an existing one.
		function subelt(p, n, atts) {
		    e = mk(n, atts);
		    p.appendChild(e);
		    return e;
		}
		
		function mkPieces(u, imWd, imHt, nh, nv) {	
		    var wd = imWd / nh;
		    var ht = imHt / nv;
    		var pieces = [];
    		var defsElt = elt('defs');
    		var piecesElt = elt('p');
    		var dwd = piecesElt.ownerSVGElement.width.animVal.value;
    		var dht = piecesElt.ownerSVGElement.height.animVal.value;
    		for (var i = 0; i < nh; ++i) {
    		    for (var j = 0; j < nv; ++j) {
        		    var id = String.fromCharCode(97 + i) + String.fromCharCode(97 + j);
    		    /*
        		    // Create clip path.
        		    var ds = ['M' + i * wd + ',' + j * ht];
        		    ds.push('h' + wd);
        		    ds.push('v' + ht);
        		    ds.push('h' + -wd);
        		    ds.push('z');
        		    d = ds.join(' ');
        		    clipPathElt = subelt(defsElt, 'clipPath', {
        		        id: 'c' + id, 
        		        clipPathUnits: 'objectBoundingBox'
        		    })
        		    subelt(clipPathElt, 'path', {d: d})
        		    
        		    
    		        // Random starting position.
        		    var x = Math.random() * (dwd - imWd * wd);
        		    var y = Math.random() * (dht - imHt * ht);
        		    
        		    // Create image with clip path.
        		    pieceElt = subelt(piecesElt, 'image', {
        		        id: 'p' + id,
        		        href: u, 
        		        'clip-path': 'url(#c' + id + ')',
        		        width: imWd,
        		        height: imHt,
        		        x: x,
        		        y: y
    		        });
    		        */
    		        
    		        pieceElt = subelt(piecesElt, 'rect', {
    		            width: wd,
    		            height: ht
		            });
        		    pieces.push({elts: [pieceElt]});
    		    }
    		}
    		return pieces;
		}
		
		function initDrag(bgElt, pieces) {
		    bgElt = elt(bgElt);
            var dragElt = null;
            var dragStartX = null;
            var dragStartY = null;
            var startX = null;
            var startY = null;

            // SVGPoint to keep track of the offset of the dragging session
            var dragOffset = rootElt.createSVGPoint();

            bgElt.addEventListener('mousemove', function (evt) {
                if (dragElt) {
                    var shiftX = evt.clientX - dragStartX;
                    var shiftY = evt.clientY - dragStartY;
                    dragElt.setAttribute('x', startX + shiftX);
                    dragElt.setAttribute('y', startY + shiftY);
                    
                    log(dragElt.getAttribute('id') + ': shift=' + shiftX + ',' + shiftY 
                        + '; pos=' + dragElt.getAttribute('x') + ',' + dragElt.getAttribute('y'));
                }
            }, false);
            bgElt.addEventListener('mouseup', function (evt) {
                if (dragElt) {
                    // resets the pointer-events
                    /*
                    dragElt.style.setProperty('pointer-events', 'all');
                    bgElt.style.setProperty('pointer-events', 'none');
                    */
                    dragElt = null;
                    log('dun');
                }
            }, false);

            // called on dragging
            for (var i in pieces) {
                var pieceElt = pieces[i].elts[0];
                pieceElt.addEventListener('mousedown', function (evt) {
                    dragElt = pieceElt;
        
                    dragStartX = evt.clientX;
                    dragStartY = evt.clientY;
                    startX = dragElt.getAttribute('x') - 0;
                    startY = dragElt.getAttribute('y') - 0;
                    /*
                    // sets the new pointer-events
                    dragElt.style.setProperty('pointer-events', 'none');
                    bgElt.style.setProperty('pointer-events', 'all');
                    */
                }, false);
            }
        }
        
        function log(text) {
            var dbgElt = elt('dbg');
            while (dbgElt.firstChild) {
                dbgElt.removeChild(dbgElt.firstChild);
            }
            dbgElt.appendChild(doc.createTextNode(text));
        }
	]]></script>
</svg>